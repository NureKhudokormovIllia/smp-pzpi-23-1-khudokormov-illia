Міністерство освіти та науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії
ЗВІТ
ПРО ЛАБОРАТОРНУ РАБОТУ №1
з дисципліни «Скриптові мови програмування»
Виконав: Перевірив:
ст. гр. ПЗПІ-23-1 ст. викл. каф. ПІ
Худокормов І.В. Сокорчук І.П.
Харків, 2025 р.
2
1 ОПИС ВИМОГ
1.1 Мета роботи
Метою цього скрипта є автоматизоване перетворення розкладу занять,
експортованого із сайту https://cist.nure.ua/ у форматі CSV, у формат, придатний
для завантаження в Google Календар. Скрипт аналізує вихідні дані, коригує їх
за необхідності та генерує новий файл із відповідним форматом, що відповідає
вимогам Google Календар.
1.2 Хід роботи
Скрипт підтримує кілька опцій:
• -h, --help – показати довідку
• -v, --version – показати версію
• -q, --quiet – тихий режим без виводу в термінал
Також визначаються змінні для параметрів роботи:
4 silent_mode=false
5 academic_group=''
6 input_file=''
7 output_dir="${PWD}"
Перед обробкою перевіряється існування та доступність файлу:
34 verify_file_access() {
35 local target_file="$1"
36 [[ ! -f "$target_file" ]] && return 4
37 [[ ! -r "$target_file" ]] && return 3
38 return 0
39 }
3
Якщо файл недоступний, скрипт завершує роботу з відповідним кодом
помилки.
CSV-файли з CIST можуть бути у форматі Windows-1251, тому їх слід
конвертувати в UTF-8:
41 convert_encoding() {
42 sed 's/\r/\r\n/g' < "$1" | iconv -f cp1251 -t utf-8
43 }
Це дозволяє уникнути проблем із відображенням кирилиці в Google
Календарі.
Якщо файл містить розклад для кількох груп, скрипт дозволяє
користувачеві вибрати конкретну групу:
60 extract_groups() {
61 gawk -vFPAT='[^,]*|"[^"]*"' 'NR!=1 {
62 gsub(/"/, "", $1)
63 if ($1 ~ / - /) {
64 split($1, g, " - ")
65 printf("%s\n", g[1])
66 }
67 }' | sort | uniq
68 }
Ця функція витягує унікальні назви груп із першого стовпця CSV-файлу.
Дати та час перетворюються у формат, сумісний із Google Календарем:
75 function format_date(date) {
76 gsub(/"/, "", date)
77 split(date, d, ".")
78 return sprintf("\"%02d/%02d/%04d\"", d[2], d[1], d[3])
79 }
4
80 function format_time(time) {
81 gsub(/"/, "", time)
82 split(time, t, ":")
83 if (t[1] == "00") return "\"12:00 AM\""
84 if (t[1] >= 12) return sprintf("\"%02d:%02d PM\"", t[1] -
12, t[2])
85 return sprintf("\"%02d:%02d AM\"", t[1], t[2])
86 }
Це гарантує правильне відображення часу в Google Календарі.
Якщо вказана конкретна група, відбираються тільки її заняття:
102 process_data_with_group() {
103 local data="$1"
104 local group="$2"
105
106 gawk -vFPAT='[^,]*|"[^"]*"' -v group="$group" '
107 NR!=1 && $1 ~ ("^\"" group " - ") {
108 $2 = format_date($2)
109 $3 = format_time($3)
110 $4 = format_date($4)
111 $5 = format_time($5)
112 print $2, $3, $4, $5, $1, $12
113 }' OFS=',' <<< "$data" | sort
114 }
Якщо група не вказана, обробляється весь розклад.
Google Календар не підтримує дублікати подій у той самий час. Щоб
уникнути цього, скрипт додає порядковий номер до назв занять:
5
128 format_for_calendar() {
129 local data="$1"
130
131 gawk -vFPAT='[^,]*|"[^"]*"' '
132 NR != 1 {
133 gsub(/"/, "", $5)
134 counter[$5]++
135 session_num = counter[$5]
136 if ($5 ~ /Лб/) {
137 session_num = int((session_num + 1) / 2)
138 }
139 $5 = "\"" $5 "; №" session_num "\""
140 print $5 "," $1 "," $2 "," $3 "," $4 "," $6
141 }
142 ' <<< "$data" | sort
143 }
Це гарантує, що в календарі не буде однакових записів.
Це дозволяє безпосередньо імпортувати файл у Google Календар.
Скрипт завершує роботу повідомленням про успішну обробку:
360 $silent_mode || print_message "Створено файл:
$output_filename"
6
ВИСНОВОК
Скрипт дозволяє автоматизувати процес обробки розкладу занять,
експортованого з CIST у формат CSV, та його конвертацію у вигляд, придатний
для імпорту в Google Календар. Він забезпечує правильне форматування дат і
часу, конвертацію кодування, вибір академічної групи та усуває дублювання
записів, додаючи унікальні ідентифікатори для кожного заняття.
Використання цього підходу спрощує управління розкладом і дозволяє
швидко імпортувати заняття до календарних сервісів, покращуючи організацію
навчального процесу. Завдяки інтерактивному вибору файлів і груп, а також
можливості працювати в тихому режимі, скрипт є гнучким інструментом для
різних сценаріїв використання.
7
ВИКОРИСТАНІ ДЖЕРЕЛА
1. Bash getopts. Посібник, що пояснює використання команди getopts
для обробки аргументів командного рядка в Bash-скриптах. URL:
https://kodekloud.com/blog/bash-getopts/ (дата звернення: 03.04.2025).
2. AWK Tutorial. Вступний курс з використання утиліти awk для
обробки текстових файлів у Linux. URL:
https://www.tutorialspoint.com/awk/index.htm (дата звернення: 03.04.2025).
3. Linux iconv Command with Practical Examples. Посібник з
використання команди iconv для конвертації кодувань текстових файлів у
Linux. URL: https://labex.io/tutorials/linux-linux-iconv-command-with-practicalexamples-422728 (дата звернення: 03.04.2025).
4. Convert line endings. Обговорення методів конвертації закінчень
рядків між форматами Windows та Unix за допомогою утиліт tr, sed та інших.
URL: https://stackoverflow.com/questions/16768776/convert-line-endings (дата
звернення: 03.04.2025).
5. Formatting and Displaying Dates with Bash Scripts in Linux. Стаття
про використання команди date для форматування та відображення дат у Bashскриптах. URL: https://www.squash.io/formatting-and-displaying-dates-with-bashscripts-in-linux/ (дата звернення: 03.04.2025).
8
ДОДАТОК А. КОД ПРОГРАМИ
1. # !/bin/bash
2.
3. # Configuration variables
4. silent_mode=false
5. academic_group=''
6. input_file=''
7. output_dir="${PWD}"
8.
9. # Constants for file patterns and error codes
10.FILE_PATTERN='^TimeTable_.._.._20..\.csv$'
11.ERR_NOT_FOUND=4
12.ERR_NO_ACCESS=3
13.
14.#################################################
15.# UTILITY FUNCTIONS
16.#################################################
17.
18.timestamp() {
19. date +'%Y-%m-%dT%H:%M:%S%z'
20.}
21.
22.log_error() {
23. echo "[$(timestamp)]: $*" >&2
24.}
25.
26.print_message() {
27. $silent_mode || echo "$*"
28.}
29.
30.#################################################
31.# FILE OPERATIONS
32.#################################################
33.
34.verify_file_access() {
35. local target_file="$1"
36. [[ ! -f "$target_file" ]] && return $ERR_NOT_FOUND
37. [[ ! -r "$target_file" ]] && return $ERR_NO_ACCESS
38. return 0
39.}
40.
41.convert_encoding() {
42. sed 's/\r/\r\n/g' < "$1" | iconv -f cp1251 -t utf-8
43.}
44.
45.write_output() {
46. local content="$1"
47. local filename="$2"
48.
49. if $silent_mode; then
50. echo "$content" > "$filename"
51. else
52. tee "$filename" <<< "$content"
53. fi
54.}
55.
56.#################################################
57.# DATA PROCESSING
58.#################################################
9
59.
60.extract_groups() {
61. gawk -vFPAT='[^,]*|"[^"]*"' 'NR!=1 {
62. gsub(/"/, "", $1)
63. if ($1 ~ / - /) {
64. split($1, g, " - ")
65. printf("%s\n", g[1])
66. }
67. }' | sort | uniq
68.}
69.
70.process_data_with_group() {
71. local data="$1"
72. local group="$2"
73.
74. gawk -vFPAT='[^,]*|"[^"]*"' -v group="$group" '
75. function format_date(date) {
76. gsub(/"/, "", date)
77. split(date, d, ".")
78. return sprintf("\"%02d/%02d/%04d\"", d[2], d[1], d[3])
79. }
80. function format_time(time) {
81. gsub(/"/, "", time)
82. split(time, t, ":")
83. if (t[1] == "00" && t[2] == "00" && t[3] == "00") return
sprintf("\"%02d:%02d AM\"", t[1], t[2])
84. if (t[1] == "12" && t[2] == "00" && t[3] == "00") return
sprintf("\"%02d:%02d PM\"", t[1], t[2])
85. if (t[1] >= 12) return sprintf("\"%02d:%02d PM\"", t[1] - 12,
t[2])
86. return sprintf("\"%02d:%02d AM\"", t[1], t[2])
87. }
88. function trim_start(str, prefix) {
89. gsub("^" prefix, "", str)
90. return sprintf("\"%s", str)
91. }
92. NR!=1 && $1 ~ ("^\"" group " - ") {
93. $2 = format_date($2)
94. $3 = format_time($3)
95. $4 = format_date($4)
96. $5 = format_time($5)
97. $1 = trim_start($1, "\"" group " - ")
98. print $2, $3, $4, $5, $1, $12
99. }' OFS=',' <<< "$data" | sort
100. }
101.
102. process_data_without_group() {
103. local data="$1"
104.
105. gawk -vFPAT='[^,]*|"[^"]*"' '
106. function format_date(date) {
107. gsub(/"/, "", date)
108. split(date, d, ".")
109. return sprintf("\"%02d/%02d/%04d\"", d[2], d[1], d[3])
110. }
111. function format_time(time) {
112. gsub(/"/, "", time)
113. split(time, t, ":")
114. if (t[1] == "00" && t[2] == "00" && t[3] == "00") return
sprintf("\"%02d:%02d AM\"", t[1], t[2])
115. if (t[1] == "12" && t[2] == "00" && t[3] == "00") return
sprintf("\"%02d:%02d PM\"", t[1], t[2])
10
116. if (t[1] >= 12) return sprintf("\"%02d:%02d PM\"", t[1] - 12,
t[2])
117. return sprintf("\"%02d:%02d AM\"", t[1], t[2])
118. }
119. NR!=1 {
120. $2 = format_date($2)
121. $3 = format_time($3)
122. $4 = format_date($4)
123. $5 = format_time($5)
124. print $2, $3, $4, $5, $1, $12
125. }' OFS=',' <<< "$data" | sort
126. }
127.
128. format_for_calendar() {
129. local data="$1"
130.
131. gawk -vFPAT='[^,]*|"[^"]*"' '
132. NR != 1 {
133. gsub(/"/, "", $5)
134.
135. counter[$5]++
136. session_num = counter[$5]
137. if ($5 ~ /Лб/) {
138. session_num = int((session_num + 1) / 2)
139. }
140. $5 = "\"" $5 "; №" session_num "\""
141. print $5 "," $1 "," $2 "," $3 "," $4 "," $6
142. }
143. ' <<< "$data" | sort
144. }
145.
146. #################################################
147. # USER INTERFACE FUNCTIONS
148. #################################################
149.
150. display_usage() {
151. cat << EOF
152. Використання скрипта:
153. $0 [ОПЦІЇ] [ГРУПА] [ФАЙЛ.csv]
154.
155. Опис:
156. Цей скрипт перетворює CSV-файл з розкладом занять у формат,
придатний для імпорту в Google Календар.
157.
158. Параметри:
159. ГРУПА Назва академічної групи (за шаблоном)
160. ФАЙЛ.csv Експортований CSV-файл розкладу занять
161.
162. Опції:
163. -h, --help Показати цю довідку
164. -v, --version Показати версію скрипта
165. -q, --quiet Тихий режим (без виводу в термінал)
166.
167. Приклади використання:
168. 1. Звичайний режим з вибором файла:
169. $0
170.
171. 2. Вказати групу та файл:
172. $0 "ПЗПІ-23-1" "TimeTable_ІП-84.csv"
173.
174. 3. Тихий режим (результат тільки у файл):
175. $0 -q "ПЗПІ-23-1" "TimeTable_ІП-84.csv"
11
176.
177. Результат роботи:
178. Скрипт створює новий файл з іменем "Google_ФАЙЛ.csv" у поточній
директорії.
179. EOF
180. }
181.
182. display_version() {
183. cat << EOF
184. $0 - University Schedule to Google Calendar Converter
185. Version: 1.0.0.0
186. Features:
187. - Converts CP1251 encoded CSV to UTF-8
188. - Filters schedule by academic group
189. - Formats dates/times for Google Calendar
190. - Handles lab sessions with proper numbering
191. EOF
192. }
193.
194. choose_csv_file() {
195. local file_list=$(ls | grep "$FILE_PATTERN" | sort -u)
196.
197. if [[ -z "$file_list" ]]; then
198. log_error "Не знайдено жодного файлу розкладу."
199. return 1
200. fi
201.
202. local chosen_file
203. PS3="Оберіть файл розкладу або вийдіть: "
204. select chosen_file in $file_list 'Вийти'; do
205. case "$chosen_file" in
206. '')
207. print_message "Неправильний вибір. Спробуйте ще раз."
208. continue
209. ;;
210. 'Вийти')
211. return 1
212. ;;
213. *)
214. echo "$chosen_file"
215. return 0
216. ;;
217. esac
218. done
219. }
220.
221. pick_group() {
222. local available_groups="$1"
223.
224. if [[ -z "$available_groups" ]]; then
225. print_message "Не знайдено жодної групи."
226. return 1
227. fi
228.
229. local current_group
230. PS3="Оберіть групу або вийдіть: "
231. select current_group in $available_groups 'Завершити роботу'; do
232. case $current_group in
233. '')
234. print_message "Неправильний вибір. Спробуйте ще раз."
235. ;;
236. 'Завершити роботу')
12
237. return 1
238. ;;
239. *)
240. echo "$current_group"
241. return 0
242. ;;
243. esac
244. done
245. }
246.
247. #################################################
248. # ARGUMENT HANDLING
249. #################################################
250.
251. parse_arguments() {
252. local parsed_options
253. parsed_options=$(getopt -l "help,version,quiet" -o "hvq" -a --
"$@")
254.
255. if [[ $? -ne 0 ]]; then
256. log_error "Помилка розбору параметрів!"
257. exit 1
258. fi
259.
260. eval set -- "$parsed_options"
261.
262. while true; do
263. case "$1" in
264. -h|--help)
265. display_usage
266. exit 0
267. ;;
268. -v|--version)
269. display_version
270. exit 0
271. ;;
272. -q|--quiet)
273. silent_mode=true
274. shift
275. ;;
276. --)
277. shift
278. break
279. ;;
280. *)
281. log_error "Невідомий параметр: $1"
282. exit 1
283. ;;
284. esac
285. done
286.
287. # Handle positional arguments
288. if [[ $# -gt 0 ]]; then
289. if [[ $# -gt 1 ]]; then
290. academic_group="$1"
291. shift
292. fi
293. input_file="$1"
294. fi
295. }
296.
297. #################################################
13
298. # MAIN PROGRAM LOGIC
299. #################################################
300.
301. main() {
302. parse_arguments "$@"
303.
304. if [[ -z "$input_file" ]]; then
305. input_file=$(choose_csv_file)
306. [[ $? -ne 0 ]] && exit 0
307. fi
308.
309. verify_file_access "$input_file"
310. case $? in
311. 0)
312. ;;
313. $ERR_NO_ACCESS)
314. log_error "Файл $input_file недоступний для читання."
315. exit $ERR_NO_ACCESS
316. ;;
317. $ERR_NOT_FOUND)
318. log_error "Файл $input_file не знайдено."
319. exit $ERR_NOT_FOUND
320. ;;
321. esac
322.
323. local csv_content
324. csv_content=$(convert_encoding "$input_file")
325.
326. local available_groups
327. available_groups=$(extract_groups <<< "$csv_content")
328.
329. if [[ -n "$available_groups" ]]; then
330. if [[ -n "$academic_group" ]] && ! echo "$available_groups" |
grep -Fxq "$academic_group"; then
331. print_message "Група $academic_group відсутня у файлі."
332. academic_group=''
333. fi
334.
335. if [[ -z "$academic_group" ]]; then
336. print_message "Оберіть групу для формування розкладу:"
337. academic_group=$(pick_group "$available_groups")
338. [[ $? -ne 0 ]] && exit 0
339. fi
340. else
341. academic_group=''
342. fi
343.
344. print_message "$([ -z "$academic_group" ] && echo "Обробка файлу
$input_file як призначеного для однієї групи..." || echo "Обробка файлу
$input_file як призначеного для групи $academic_group...")"
345.
346. local processed_data
347. if [[ -n "$academic_group" ]]; then
348. processed_data=$(process_data_with_group "$csv_content"
"$academic_group")
349. else
350. processed_data=$(process_data_without_group "$csv_content")
351. fi
352.
353. local final_output
354. final_output=$(format_for_calendar "$processed_data")
14
355. final_output=$'"Subject","Start Date","Start Time","End
Date","End Time","Description"\n'"$final_output"
356.
357. local
output_filename="${output_dir}/Google_${input_file%.csv}.csv"
358. write_output "$final_output" "$output_filename"
359.
360. $silent_mode || print_message "Створено файл: $output_filename"
361. }
362.
363. main "$@"